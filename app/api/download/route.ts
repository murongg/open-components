import { NextRequest, NextResponse } from 'next/server'
import JSZip from 'jszip'

export async function POST(request: NextRequest) {
  try {
    const { components } = await request.json()

    if (!components || !Array.isArray(components) || components.length === 0) {
      return NextResponse.json(
        { error: 'Components array is required and must not be empty' },
        { status: 400 }
      )
    }

    // Create a new zip file
    const zip = new JSZip()

    // Create components folder
    const componentsFolder = zip.folder('components')

    // Add each component
    components.forEach((component: any) => {
      if (!component.name || !component.code) {
        return // Skip invalid components
      }

      // Create component folder
      const componentFolder = componentsFolder?.folder(component.name)
      if (!componentFolder) return

      // Add component code file
      componentFolder.file(`${component.name}.tsx`, component.code)

      // Add documentation file
      if (component.documentation) {
        componentFolder.file('README.md', `# ${component.name}

${component.description || ''}

## Category
${component.category || 'UI Component'}

## Documentation

${component.documentation}

## Usage

\`\`\`tsx
import { ${component.name} } from './${component.name}'

function App() {
  return (
    <${component.name} />
  )
}
\`\`\`
`)
      }

      // Add TypeScript declaration file
      const typeDeclaration = `import React from 'react'

export interface ${component.name}Props {
  // Add your props here
  children?: React.ReactNode
}

export declare const ${component.name}: React.FC<${component.name}Props>
`
      componentFolder.file(`${component.name}.d.ts`, typeDeclaration)

      // Add index file for easy importing
      const indexFile = `export { ${component.name} } from './${component.name}'
export type { ${component.name}Props } from './${component.name}'
`
      componentFolder.file('index.ts', indexFile)
    })

    // Add main package.json for the entire library
    const packageJson = {
      name: 'component-library',
      version: '1.0.0',
      description: 'A React component library generated by Open Components',
      main: 'index.ts',
      scripts: {
        test: 'echo "Error: no test specified" && exit 1',
        build: 'tsc',
        dev: 'tsc --watch'
      },
      keywords: ['react', 'components', 'ui', 'library', 'tailwindcss'],
      author: 'Generated by Open Components',
      license: 'MIT',
      peerDependencies: {
        react: '>=16.8.0',
        'react-dom': '>=16.8.0'
      },
      devDependencies: {
        typescript: '^5.0.0',
        '@types/react': '^18.0.0',
        '@types/react-dom': '^18.0.0',
        'tailwindcss': '^3.4.0',
        'autoprefixer': '^10.4.0',
        'postcss': '^8.4.0'
      }
    }

    zip.file('package.json', JSON.stringify(packageJson, null, 2))

    // Add main index file that exports all components
    const mainIndexFile = components
      .map((component: any) => `export * from './components/${component.name}'`)
      .join('\n')

    zip.file('index.ts', mainIndexFile)

    // Add main README
    const mainReadme = `# Component Library

A React component library generated by Open Components with Tailwind CSS support.

## Components

${components.map((component: any) => `- **${component.name}** - ${component.description || 'A React component'}`).join('\n')}

## Features

- ðŸŽ¨ **Tailwind CSS Integration** - All components use Tailwind CSS for styling
- ðŸ“± **Responsive Design** - Mobile-first responsive components
- ðŸŽ­ **Custom Animations** - Built-in fade-in, slide-up, and bounce animations
- ðŸŽ¨ **Custom Color Palette** - Extended primary and secondary color schemes
- ðŸ”§ **TypeScript Support** - Full TypeScript definitions included

## Installation

\`\`\`bash
npm install
\`\`\`

## Setup Tailwind CSS

The downloaded package includes Tailwind CSS configuration for styling components:

1. **Install dependencies:**
   \`\`\`bash
   npm install
   \`\`\`

2. **Build the library:**
   \`\`\`bash
   npm run build
   \`\`\`

3. **Use components with Tailwind CSS classes in your app**

## Usage

\`\`\`tsx
import { ${components[0]?.name || 'Component'}, ${components[1]?.name || 'AnotherComponent'} } from './index'

function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <${components[0]?.name || 'Component'} />
      <${components[1]?.name || 'AnotherComponent'} />
    </div>
  )
}
\`\`\`

## Development

\`\`\`bash
npm run dev        # Watch mode (TypeScript)
npm run build      # Build everything
\`\`\`

## Tailwind CSS Features

### Custom Colors
- **Primary**: Blue color palette (50-900)
- **Secondary**: Gray color palette (50-900)

### Custom Animations
- \`animate-fade-in\`: Smooth fade-in effect
- \`animate-slide-up\`: Slide up from bottom
- \`animate-bounce-gentle\`: Gentle bouncing animation

### Custom Components
- \`.btn-primary\`: Primary button styles
- \`.btn-secondary\`: Secondary button styles
- \`.card\`: Card container styles
- \`.input-field\`: Input field styles

## Project Structure

\`\`\`
â”œâ”€â”€ components/          # Individual component folders
â”œâ”€â”€ tailwind.config.js  # Tailwind configuration
â”œâ”€â”€ postcss.config.js   # PostCSS configuration
â”œâ”€â”€ tsconfig.json       # TypeScript configuration
â””â”€â”€ package.json        # Dependencies and scripts
\`\`\`
`

    zip.file('README.md', mainReadme)

    // Add TypeScript configuration
    const tsConfig = {
      compilerOptions: {
        target: 'ES2020',
        lib: ['dom', 'dom.iterable', 'es6'],
        allowJs: true,
        skipLibCheck: true,
        esModuleInterop: true,
        allowSyntheticDefaultImports: true,
        strict: true,
        forceConsistentCasingInFileNames: true,
        noFallthroughCasesInSwitch: true,
        module: 'esnext',
        moduleResolution: 'node',
        resolveJsonModule: true,
        isolatedModules: true,
        noEmit: false,
        jsx: 'react-jsx',
        declaration: true,
        outDir: './dist'
      },
      include: ['**/*.ts', '**/*.tsx'],
      exclude: ['node_modules', 'dist']
    }

    zip.file('tsconfig.json', JSON.stringify(tsConfig, null, 2))

    // Add Tailwind CSS configuration
    const tailwindConfig = `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./components/**/*.{js,ts,jsx,tsx}",
    "./**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'bounce-gentle': 'bounceGentle 2s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        bounceGentle: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-5px)' },
        },
      },
    },
  },
  plugins: [],
}
`
    zip.file('tailwind.config.js', tailwindConfig)

    // Add PostCSS configuration
    const postcssConfig = `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
`
    zip.file('postcss.config.js', postcssConfig)



    // Generate the zip file as base64 string
    const zipBase64 = await zip.generateAsync({ type: 'base64' })
    
    // Convert base64 to Uint8Array
    const zipBuffer = new Uint8Array(Buffer.from(zipBase64, 'base64'))
    
    return new NextResponse(zipBuffer, {
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': 'attachment; filename="all-components.zip"',
      },
    })

  } catch (error) {
    console.error('Download API error:', error)
    return NextResponse.json(
      { error: 'Failed to create download package' },
      { status: 500 }
    )
  }
}
